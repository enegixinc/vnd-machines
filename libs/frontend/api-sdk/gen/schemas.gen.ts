// This file is auto-generated by @hey-api/openapi-ts

export const $LoginDto = {
    type: 'object',
    properties: {
        email: {
            type: 'string',
            example: 'email@example.com',
            description: 'Email of the user',
            uniqueItems: true
        },
        password: {
            type: 'string',
            example: 'Password@123',
            minLength: 8,
            maxLength: 32
        }
    },
    required: ['email', 'password']
} as const;

export const $GetManyUserEntityResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SerializedUserDto'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $UserEntity = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt']
} as const;

export const $UserRole = {
    type: 'string',
    description: 'Role of the user',
    default: 'supplier',
    enum: ['admin', 'supplier']
} as const;

export const $GetManyProductEntityResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SerializedProductDto'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $ProductEntity = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt']
} as const;

export const $OmitTypeClass = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        name: {
            type: 'object',
            example: {
                en: 'Name of the Category in English',
                fr: 'Name of the Category in French'
            },
            description: 'Name of the Category in multiple languages'
        },
        auto: {
            type: 'boolean'
        },
        categoryPicture: {
            type: 'string',
            example: 'https://www.local.com/image.jpg',
            description: 'Category picture'
        },
        referTo: {
            type: 'string',
            example: 'example@email.com',
            description: 'Email of the owner'
        },
        sortIndex: {
            type: 'number',
            example: 1,
            description: 'Sort index'
        },
        suppliers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        brands: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt', 'name', 'auto', 'categoryPicture', 'referTo', 'sortIndex', 'suppliers', 'brands']
} as const;

export const $SerializedProductDto = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        upc: {
            type: 'string',
            example: '1231',
            description: 'UPC of the product'
        },
        additionPrice: {
            type: 'number',
            example: 100.5,
            description: 'Additional price of the product'
        },
        ageControl: {
            type: 'number',
            example: 18,
            description: 'Age control of the product'
        },
        name: {
            type: 'object',
            example: {
                en: 'Name of the product in English',
                fr: 'Name of the product in French'
            },
            description: 'Name of the product in multiple languages'
        },
        barcode: {
            type: 'string',
            example: '1234567890123',
            description: 'Barcode of the product'
        },
        costPrice: {
            type: 'number',
            example: 99.99,
            description: 'Cost price of the product'
        },
        description: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        detail: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        include: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        ingredients: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        keyFeatures: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        specification: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        dimension: {
            type: 'object',
            example: {},
            description: 'Dimensions of the product'
        },
        price: {
            type: 'number',
            example: 199.99,
            description: 'Price of the product'
        },
        pricePerKilo: {
            type: 'boolean',
            example: true,
            description: 'Whether the price is per kilo or not'
        },
        prodType: {
            type: 'string',
            example: 'electronic',
            description: 'Type of the product'
        },
        productPictures: {
            example: ['image1.jpg', 'image2.jpg'],
            description: 'Array of product picture URLs',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        referTo: {
            type: 'string',
            example: 'Refer to some other product',
            description: 'Reference to another product'
        },
        sortIndex: {
            type: 'number',
            example: 1,
            description: 'Index for sorting the product'
        },
        vatIndex: {
            type: 'number',
            example: 1,
            description: 'VAT index of the product'
        },
        virtualProduct: {
            type: 'number',
            example: 0,
            description: 'Virtual product indicator'
        },
        category: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        brand: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        suppliers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        productVideo: {
            type: 'string',
            example: 'https://www.youtube.com/watch?v=1234567890',
            description: 'Video of the product'
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt', 'upc', 'additionPrice', 'ageControl', 'name', 'barcode', 'costPrice', 'description', 'detail', 'include', 'ingredients', 'keyFeatures', 'specification', 'dimension', 'price', 'pricePerKilo', 'prodType', 'productPictures', 'referTo', 'sortIndex', 'vatIndex', 'virtualProduct', 'category', 'brand', 'suppliers', 'productVideo']
} as const;

export const $SerializedUserDto = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        active: {
            type: 'boolean',
            example: true,
            description: 'Is the user active'
        },
        email: {
            type: 'string',
            example: 'email@example.com',
            description: 'Email of the user',
            uniqueItems: true
        },
        firstName: {
            type: 'string',
            example: 'John'
        },
        lastName: {
            type: 'string',
            example: 'Doe'
        },
        phoneNumber: {
            type: 'string',
            example: '+201554891929',
            description: 'Phone number of the user'
        },
        role: {
            example: 'supplier',
            '$ref': '#/components/schemas/UserRole'
        },
        businessName: {
            type: 'string',
            example: 'Business Name',
            description: 'Business name of the user',
            nullable: true
        },
        products: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SerializedProductDto'
            }
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt', 'active', 'email', 'firstName', 'lastName', 'phoneNumber', 'role', 'businessName', 'products']
} as const;

export const $Object = {
    type: 'object',
    properties: {}
} as const;

export const $CreateUserDto = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true,
            description: 'Is the user active'
        },
        email: {
            type: 'string',
            example: 'email@example.com',
            description: 'Email of the user',
            uniqueItems: true
        },
        firstName: {
            type: 'string',
            example: 'John'
        },
        lastName: {
            type: 'string',
            example: 'Doe'
        },
        phoneNumber: {
            type: 'string',
            example: '+201554891929',
            description: 'Phone number of the user'
        },
        role: {
            example: 'supplier',
            '$ref': '#/components/schemas/UserRole'
        },
        businessName: {
            type: 'string',
            example: 'Business Name',
            description: 'Business name of the user',
            nullable: true
        },
        password: {
            type: 'string',
            example: 'Password@123',
            minLength: 8,
            maxLength: 32
        }
    },
    required: ['active', 'email', 'firstName', 'lastName', 'phoneNumber', 'role', 'businessName', 'password']
} as const;

export const $CreateManyUserEntityDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateUserDto'
            }
        }
    },
    required: ['bulk']
} as const;

export const $UpdateUserDto = {
    type: 'object',
    properties: {
        active: {
            type: 'boolean',
            example: true,
            description: 'Is the user active'
        },
        email: {
            type: 'string',
            example: 'email@example.com',
            description: 'Email of the user',
            uniqueItems: true
        },
        firstName: {
            type: 'string',
            example: 'John'
        },
        lastName: {
            type: 'string',
            example: 'Doe'
        },
        phoneNumber: {
            type: 'string',
            example: '+201554891929',
            description: 'Phone number of the user'
        },
        role: {
            example: 'supplier',
            '$ref': '#/components/schemas/UserRole'
        },
        businessName: {
            type: 'string',
            example: 'Business Name',
            description: 'Business name of the user',
            nullable: true
        },
        password: {
            type: 'string',
            example: 'Password@123',
            minLength: 8,
            maxLength: 32
        }
    }
} as const;

export const $PickTypeClass = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        }
    },
    required: ['_id']
} as const;

export const $CreateProductDto = {
    type: 'object',
    properties: {
        upc: {
            type: 'string',
            example: '1231',
            description: 'UPC of the product'
        },
        additionPrice: {
            type: 'number',
            example: 100.5,
            description: 'Additional price of the product'
        },
        ageControl: {
            type: 'number',
            example: 18,
            description: 'Age control of the product'
        },
        name: {
            type: 'object',
            example: {
                en: 'Name of the product in English',
                fr: 'Name of the product in French'
            },
            description: 'Name of the product in multiple languages'
        },
        barcode: {
            type: 'string',
            example: '1234567890123',
            description: 'Barcode of the product'
        },
        costPrice: {
            type: 'number',
            example: 99.99,
            description: 'Cost price of the product'
        },
        description: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        detail: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        include: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        ingredients: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        keyFeatures: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        specification: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        dimension: {
            type: 'object',
            example: {},
            description: 'Dimensions of the product'
        },
        price: {
            type: 'number',
            example: 199.99,
            description: 'Price of the product'
        },
        pricePerKilo: {
            type: 'boolean',
            example: true,
            description: 'Whether the price is per kilo or not'
        },
        prodType: {
            type: 'string',
            example: 'electronic',
            description: 'Type of the product'
        },
        productPictures: {
            example: ['image1.jpg', 'image2.jpg'],
            description: 'Array of product picture URLs',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        referTo: {
            type: 'string',
            example: 'Refer to some other product',
            description: 'Reference to another product'
        },
        sortIndex: {
            type: 'number',
            example: 1,
            description: 'Index for sorting the product'
        },
        vatIndex: {
            type: 'number',
            example: 1,
            description: 'VAT index of the product'
        },
        virtualProduct: {
            type: 'number',
            example: 0,
            description: 'Virtual product indicator'
        },
        suppliers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PickTypeClass'
            }
        },
        brand: {
            '$ref': '#/components/schemas/PickTypeClass'
        },
        category: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PickTypeClass'
            }
        },
        productVideo: {
            type: 'File'
        }
    },
    required: ['upc', 'additionPrice', 'ageControl', 'name', 'barcode', 'costPrice', 'description', 'detail', 'include', 'ingredients', 'keyFeatures', 'specification', 'dimension', 'price', 'pricePerKilo', 'prodType', 'productPictures', 'referTo', 'sortIndex', 'vatIndex', 'virtualProduct', 'suppliers', 'brand', 'category', 'productVideo']
} as const;

export const $CreateManyProductEntityDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateProductDto'
            }
        }
    },
    required: ['bulk']
} as const;

export const $UpdateProductDto = {
    type: 'object',
    properties: {
        upc: {
            type: 'string',
            example: '1231',
            description: 'UPC of the product'
        },
        additionPrice: {
            type: 'number',
            example: 100.5,
            description: 'Additional price of the product'
        },
        ageControl: {
            type: 'number',
            example: 18,
            description: 'Age control of the product'
        },
        name: {
            type: 'object',
            example: {
                en: 'Name of the product in English',
                fr: 'Name of the product in French'
            },
            description: 'Name of the product in multiple languages'
        },
        barcode: {
            type: 'string',
            example: '1234567890123',
            description: 'Barcode of the product'
        },
        costPrice: {
            type: 'number',
            example: 99.99,
            description: 'Cost price of the product'
        },
        description: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        detail: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        include: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        ingredients: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        keyFeatures: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        specification: {
            type: 'object',
            example: {
                en: 'Description of the product in English',
                fr: 'Description of the product in French'
            },
            description: 'Description of the product in multiple languages'
        },
        dimension: {
            type: 'object',
            example: {},
            description: 'Dimensions of the product'
        },
        price: {
            type: 'number',
            example: 199.99,
            description: 'Price of the product'
        },
        pricePerKilo: {
            type: 'boolean',
            example: true,
            description: 'Whether the price is per kilo or not'
        },
        prodType: {
            type: 'string',
            example: 'electronic',
            description: 'Type of the product'
        },
        productPictures: {
            example: ['image1.jpg', 'image2.jpg'],
            description: 'Array of product picture URLs',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        referTo: {
            type: 'string',
            example: 'Refer to some other product',
            description: 'Reference to another product'
        },
        sortIndex: {
            type: 'number',
            example: 1,
            description: 'Index for sorting the product'
        },
        vatIndex: {
            type: 'number',
            example: 1,
            description: 'VAT index of the product'
        },
        virtualProduct: {
            type: 'number',
            example: 0,
            description: 'Virtual product indicator'
        },
        suppliers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PickTypeClass'
            }
        },
        brand: {
            '$ref': '#/components/schemas/PickTypeClass'
        },
        category: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PickTypeClass'
            }
        },
        productVideo: {
            type: 'File'
        }
    }
} as const;

export const $GetManyCategoryEntityResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SerializedCategoryDto'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $CategoryEntity = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt']
} as const;

export const $SerializedCategoryDto = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        name: {
            type: 'object',
            example: {
                en: 'Name of the Category in English',
                fr: 'Name of the Category in French'
            },
            description: 'Name of the Category in multiple languages'
        },
        auto: {
            type: 'boolean'
        },
        categoryPicture: {
            type: 'string',
            example: 'https://www.local.com/image.jpg',
            description: 'Category picture'
        },
        referTo: {
            type: 'string',
            example: 'example@email.com',
            description: 'Email of the owner'
        },
        sortIndex: {
            type: 'number',
            example: 1,
            description: 'Sort index'
        },
        products: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        suppliers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        brands: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt', 'name', 'auto', 'categoryPicture', 'referTo', 'sortIndex', 'products', 'suppliers', 'brands']
} as const;

export const $CreateCategoryDto = {
    type: 'object',
    properties: {
        name: {
            type: 'object',
            example: {
                en: 'Name of the Category in English',
                fr: 'Name of the Category in French'
            },
            description: 'Name of the Category in multiple languages'
        },
        auto: {
            type: 'boolean'
        },
        categoryPicture: {
            type: 'File',
            example: 'https://www.local.com/image.jpg',
            description: 'Category picture'
        },
        referTo: {
            type: 'string',
            example: 'example@email.com',
            description: 'Email of the owner'
        },
        sortIndex: {
            type: 'number',
            example: 1,
            description: 'Sort index'
        }
    },
    required: ['name', 'auto', 'categoryPicture', 'referTo', 'sortIndex']
} as const;

export const $CreateManyCategoryEntityDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateCategoryDto'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyBrandEntityResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SerializedBrandDto'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $BrandEntity = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt']
} as const;

export const $SerializedBrandDto = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '6a909236-53f2-4727-b780-e41e115ee906'
        },
        __v: {
            type: 'number',
            example: 1,
            description: 'Version'
        },
        createdAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        updatedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z'
        },
        deletedAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        lastSyncAt: {
            type: 'date',
            example: '2021-07-01T00:00:00.000Z',
            nullable: true
        },
        name: {
            type: 'object',
            example: {
                en: 'Name of the product in English',
                fr: 'Name of the product in French'
            },
            description: 'Name of the product in multiple languages'
        },
        referTo: {
            type: 'string',
            example: 'example@email.com',
            description: 'Email of the owner'
        },
        categories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        products: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        suppliers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OmitTypeClass'
            }
        },
        logo: {
            type: 'string',
            example: 'https://www.local.com/image.jpg',
            description: 'Brand logo'
        },
        picture: {
            type: 'string',
            example: 'https://www.local.com/image.jpg',
            description: 'Brand picture'
        }
    },
    required: ['_id', '__v', 'createdAt', 'updatedAt', 'deletedAt', 'lastSyncAt', 'name', 'referTo', 'categories', 'products', 'suppliers', 'logo', 'picture']
} as const;

export const $CreateBrandDto = {
    type: 'object',
    properties: {
        name: {
            type: 'object',
            example: {
                en: 'Name of the product in English',
                fr: 'Name of the product in French'
            },
            description: 'Name of the product in multiple languages'
        },
        referTo: {
            type: 'string',
            example: 'example@email.com',
            description: 'Email of the owner'
        },
        suppliers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PickTypeClass'
            }
        },
        picture: {
            type: 'string',
            example: 'https://www.local.com/image.jpg',
            description: 'Brand picture'
        },
        products: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PickTypeClass'
            }
        },
        categories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PickTypeClass'
            }
        },
        logo: {
            type: 'string',
            example: 'https://www.local.com/image.jpg',
            description: 'Brand logo'
        }
    },
    required: ['name', 'referTo', 'suppliers', 'picture', 'products', 'categories', 'logo']
} as const;

export const $CreateManyBrandEntityDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CreateBrandDto'
            }
        }
    },
    required: ['bulk']
} as const;