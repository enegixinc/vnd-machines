// This file is auto-generated by @hey-api/openapi-ts

export type LoginDto = {
    /**
     * Email of the user
     */
    email: string;
    password: string;
};

/**
 * Role of the user
 */
export type UserRole = 'admin' | 'supplier';

export type SharedUserDto = {
    /**
     * Is the user active
     */
    active: boolean;
    /**
     * Email of the user
     */
    email: string;
    firstName: string;
    lastName: string;
    /**
     * Phone number of the user
     */
    phoneNumber: string;
    role: UserRole;
    /**
     * Business name of the user
     */
    businessName: string | null;
};

export type UserEntity = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
};

export type GetManyProductEntityResponseDto = {
    data: Array<SerializedProductDto>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type ProductEntity = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
};

export type SharedCategoryDto = {
    /**
     * Name of the Category in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    auto: boolean;
    /**
     * Category picture
     */
    categoryPicture: string;
    /**
     * Email of the owner
     */
    referTo: string;
    /**
     * Sort index
     */
    sortIndex: number;
};

export type SharedBrandDto = {
    /**
     * Name of the product in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    /**
     * Email of the owner
     */
    referTo: string;
    /**
     * Brand logo
     */
    logo: string;
    /**
     * Brand picture
     */
    picture: string;
};

export type SerializedProductDto = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
    /**
     * UPC of the product
     */
    upc: string;
    /**
     * Additional price of the product
     */
    additionPrice: number;
    /**
     * Age control of the product
     */
    ageControl: number;
    /**
     * Name of the product in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    /**
     * Barcode of the product
     */
    barcode: string;
    /**
     * Cost price of the product
     */
    costPrice: number;
    /**
     * Description of the product in multiple languages
     */
    description: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    detail: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    include: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    ingredients: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    keyFeatures: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    specification: {
        [key: string]: unknown;
    };
    /**
     * Dimensions of the product
     */
    dimension: {
        [key: string]: unknown;
    };
    /**
     * Price of the product
     */
    price: number;
    /**
     * Whether the price is per kilo or not
     */
    pricePerKilo: boolean;
    /**
     * Type of the product
     */
    prodType: string;
    /**
     * Array of product picture URLs
     */
    productPictures: Array<(string)>;
    /**
     * Reference to another product
     */
    referTo: string;
    /**
     * Index for sorting the product
     */
    sortIndex: number;
    /**
     * VAT index of the product
     */
    vatIndex: number;
    /**
     * Virtual product indicator
     */
    virtualProduct: number;
    /**
     * Video of the product
     */
    productVideo: string;
    category: SharedCategoryDto;
    brand: SharedBrandDto;
    supplier: SharedUserDto;
};

export type GetManyBrandEntityResponseDto = {
    data: Array<SerializedBrandDto>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type BrandEntity = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
};

export type SharedProductDto = {
    /**
     * UPC of the product
     */
    upc: string;
    /**
     * Additional price of the product
     */
    additionPrice: number;
    /**
     * Age control of the product
     */
    ageControl: number;
    /**
     * Name of the product in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    /**
     * Barcode of the product
     */
    barcode: string;
    /**
     * Cost price of the product
     */
    costPrice: number;
    /**
     * Description of the product in multiple languages
     */
    description: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    detail: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    include: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    ingredients: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    keyFeatures: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    specification: {
        [key: string]: unknown;
    };
    /**
     * Dimensions of the product
     */
    dimension: {
        [key: string]: unknown;
    };
    /**
     * Price of the product
     */
    price: number;
    /**
     * Whether the price is per kilo or not
     */
    pricePerKilo: boolean;
    /**
     * Type of the product
     */
    prodType: string;
    /**
     * Array of product picture URLs
     */
    productPictures: Array<(string)>;
    /**
     * Reference to another product
     */
    referTo: string;
    /**
     * Index for sorting the product
     */
    sortIndex: number;
    /**
     * VAT index of the product
     */
    vatIndex: number;
    /**
     * Virtual product indicator
     */
    virtualProduct: number;
};

export type SerializedBrandDto = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
    /**
     * Name of the product in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    /**
     * Email of the owner
     */
    referTo: string;
    /**
     * Brand logo
     */
    logo: string;
    /**
     * Brand picture
     */
    picture: string;
    categories: Array<SharedCategoryDto>;
    products: Array<SharedProductDto>;
    suppliers: Array<SharedProductDto>;
};

export type GetManyContractEntityResponseDto = {
    data: Array<SerializedContractDto>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type ContractEntity = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
};

export type SerializedUserDto = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
    /**
     * Is the user active
     */
    active: boolean;
    /**
     * Email of the user
     */
    email: string;
    firstName: string;
    lastName: string;
    /**
     * Phone number of the user
     */
    phoneNumber: string;
    role: UserRole;
    /**
     * Business name of the user
     */
    businessName: string | null;
    products: Array<SerializedProductDto>;
    brand: Array<SerializedBrandDto>;
    contracts: Array<SerializedContractDto>;
};

export type SerializedContractDto = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
    supplier: SerializedUserDto;
    totalRevenue: string;
    totalSales: string;
};

export type Object = unknown;

export type CreateUserDto = {
    /**
     * Is the user active
     */
    active: boolean;
    /**
     * Email of the user
     */
    email: string;
    firstName: string;
    lastName: string;
    /**
     * Phone number of the user
     */
    phoneNumber: string;
    role: UserRole;
    /**
     * Business name of the user
     */
    businessName: string | null;
    password: string;
};

export type CreateManyUserEntityDto = {
    bulk: Array<CreateUserDto>;
};

export type UpdateUserDto = {
    /**
     * Is the user active
     */
    active?: boolean;
    /**
     * Email of the user
     */
    email?: string;
    firstName?: string;
    lastName?: string;
    /**
     * Phone number of the user
     */
    phoneNumber?: string;
    role?: UserRole;
    /**
     * Business name of the user
     */
    businessName?: string | null;
    password?: string;
};

export type PickTypeClass = {
    _id: string;
};

export type CreateContractDto = {
    description: string;
    feePerSale: number;
    feeType: 'percentage' | 'fixed';
    startDate: string;
    endDate: string;
    status: 'active' | 'expired' | 'terminated';
    supplier: PickTypeClass;
};

export type CreateProductDto = {
    /**
     * UPC of the product
     */
    upc: string;
    /**
     * Additional price of the product
     */
    additionPrice: number;
    /**
     * Age control of the product
     */
    ageControl: number;
    /**
     * Name of the product in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    /**
     * Barcode of the product
     */
    barcode: string;
    /**
     * Cost price of the product
     */
    costPrice: number;
    /**
     * Description of the product in multiple languages
     */
    description: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    detail: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    include: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    ingredients: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    keyFeatures: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    specification: {
        [key: string]: unknown;
    };
    /**
     * Dimensions of the product
     */
    dimension: {
        [key: string]: unknown;
    };
    /**
     * Price of the product
     */
    price: number;
    /**
     * Whether the price is per kilo or not
     */
    pricePerKilo: boolean;
    /**
     * Type of the product
     */
    prodType: string;
    /**
     * Array of product picture URLs
     */
    productPictures: Array<(string)>;
    /**
     * Reference to another product
     */
    referTo: string;
    /**
     * Index for sorting the product
     */
    sortIndex: number;
    /**
     * VAT index of the product
     */
    vatIndex: number;
    /**
     * Virtual product indicator
     */
    virtualProduct: number;
    supplier: PickTypeClass;
    brand: PickTypeClass;
    category: PickTypeClass;
    productVideo: File;
};

export type CreateManyProductEntityDto = {
    bulk: Array<CreateProductDto>;
};

export type UpdateProductDto = {
    /**
     * UPC of the product
     */
    upc?: string;
    /**
     * Additional price of the product
     */
    additionPrice?: number;
    /**
     * Age control of the product
     */
    ageControl?: number;
    /**
     * Name of the product in multiple languages
     */
    name?: {
        [key: string]: unknown;
    };
    /**
     * Barcode of the product
     */
    barcode?: string;
    /**
     * Cost price of the product
     */
    costPrice?: number;
    /**
     * Description of the product in multiple languages
     */
    description?: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    detail?: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    include?: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    ingredients?: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    keyFeatures?: {
        [key: string]: unknown;
    };
    /**
     * Description of the product in multiple languages
     */
    specification?: {
        [key: string]: unknown;
    };
    /**
     * Dimensions of the product
     */
    dimension?: {
        [key: string]: unknown;
    };
    /**
     * Price of the product
     */
    price?: number;
    /**
     * Whether the price is per kilo or not
     */
    pricePerKilo?: boolean;
    /**
     * Type of the product
     */
    prodType?: string;
    /**
     * Array of product picture URLs
     */
    productPictures?: Array<(string)>;
    /**
     * Reference to another product
     */
    referTo?: string;
    /**
     * Index for sorting the product
     */
    sortIndex?: number;
    /**
     * VAT index of the product
     */
    vatIndex?: number;
    /**
     * Virtual product indicator
     */
    virtualProduct?: number;
    supplier?: PickTypeClass;
    brand?: PickTypeClass;
    category?: PickTypeClass;
    productVideo?: File;
};

export type GetManyCategoryEntityResponseDto = {
    data: Array<SerializedCategoryDto>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type CategoryEntity = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
};

export type SerializedCategoryDto = {
    _id: string;
    /**
     * Version
     */
    __v: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    lastSyncAt: string | null;
    /**
     * Name of the Category in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    auto: boolean;
    /**
     * Category picture
     */
    categoryPicture: string;
    /**
     * Email of the owner
     */
    referTo: string;
    /**
     * Sort index
     */
    sortIndex: number;
    products: Array<SharedProductDto>;
    suppliers: Array<SharedUserDto>;
    brands: Array<SharedBrandDto>;
};

export type CreateCategoryDto = {
    /**
     * Name of the Category in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    auto: boolean;
    /**
     * Category picture
     */
    categoryPicture: File;
    /**
     * Email of the owner
     */
    referTo: string;
    /**
     * Sort index
     */
    sortIndex: number;
};

export type CreateManyCategoryEntityDto = {
    bulk: Array<CreateCategoryDto>;
};

export type CreateBrandDto = {
    /**
     * Name of the product in multiple languages
     */
    name: {
        [key: string]: unknown;
    };
    /**
     * Email of the owner
     */
    referTo: string;
    /**
     * Brand logo
     */
    logo: string;
    /**
     * Brand picture
     */
    picture: string;
    suppliers: Array<PickTypeClass>;
    products: Array<PickTypeClass>;
    categories: Array<PickTypeClass>;
};

export type CreateManyBrandEntityDto = {
    bulk: Array<CreateBrandDto>;
};

export type $OpenApiTs = {
    '/auth/login': {
        post: {
            req: {
                requestBody: LoginDto;
            };
            res: {
                201: unknown;
            };
        };
    };
    '/auth/me': {
        get: {
            res: {
                200: SerializedUserDto;
            };
        };
    };
    '/auth/refresh': {
        post: {
            req: {
                requestBody: Object;
            };
            res: {
                /**
                 * Refresh token
                 */
                200: {
                    accessToken?: string;
                    refreshToken?: string;
                };
                /**
                 * Invalid refresh token
                 */
                404: unknown;
            };
        };
    };
    '/users/{id}': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                id: string;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
            };
            res: {
                /**
                 * Get one base response
                 */
                200: SerializedUserDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        patch: {
            req: {
                id: string;
                requestBody: UpdateUserDto;
            };
            res: {
                /**
                 * Response
                 */
                200: SharedUserDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        delete: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Delete one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/users': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                /**
                 * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
                 */
                filter?: Array<(string)>;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
                /**
                 * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
                 */
                limit?: number;
                /**
                 * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
                 */
                offset?: number;
                /**
                 * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
                 */
                or?: Array<(string)>;
                /**
                 * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
                 */
                page?: number;
                /**
                 * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
                 */
                s?: string;
                /**
                 * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
                 */
                sort?: Array<(string)>;
            };
            res: {
                /**
                 * Get paginated response
                 */
                200: SerializedUserDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        post: {
            req: {
                requestBody: CreateUserDto;
            };
            res: {
                /**
                 * Get create one base response
                 */
                201: SerializedUserDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/users/bulk': {
        post: {
            req: {
                requestBody: CreateManyUserEntityDto;
            };
            res: {
                /**
                 * Get create many base response
                 */
                201: Array<SerializedUserDto>;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/users/{id}/recover': {
        patch: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Recover one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/contracts/{id}': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                id: string;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
            };
            res: {
                /**
                 * Get one base response
                 */
                200: SerializedContractDto;
            };
        };
        patch: {
            req: {
                id: string;
                requestBody: ContractEntity;
            };
            res: {
                /**
                 * Response
                 */
                200: ContractEntity;
            };
        };
    };
    '/contracts': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                /**
                 * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
                 */
                filter?: Array<(string)>;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
                /**
                 * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
                 */
                limit?: number;
                /**
                 * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
                 */
                offset?: number;
                /**
                 * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
                 */
                or?: Array<(string)>;
                /**
                 * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
                 */
                page?: number;
                /**
                 * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
                 */
                s?: string;
                /**
                 * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
                 */
                sort?: Array<(string)>;
            };
            res: {
                /**
                 * Get paginated response
                 */
                200: GetManyContractEntityResponseDto;
            };
        };
        post: {
            req: {
                requestBody: CreateContractDto;
            };
            res: {
                /**
                 * Get create one base response
                 */
                201: SerializedContractDto;
            };
        };
    };
    '/products/{id}': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                id: string;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
            };
            res: {
                /**
                 * Get one base response
                 */
                200: SerializedProductDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        patch: {
            req: {
                id: string;
                requestBody: UpdateProductDto;
            };
            res: {
                /**
                 * Response
                 */
                200: SerializedProductDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        delete: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Delete one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/products': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                /**
                 * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
                 */
                filter?: Array<(string)>;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
                /**
                 * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
                 */
                limit?: number;
                /**
                 * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
                 */
                offset?: number;
                /**
                 * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
                 */
                or?: Array<(string)>;
                /**
                 * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
                 */
                page?: number;
                /**
                 * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
                 */
                s?: string;
                /**
                 * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
                 */
                sort?: Array<(string)>;
            };
            res: {
                /**
                 * Get paginated response
                 */
                200: GetManyProductEntityResponseDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        post: {
            req: {
                requestBody: CreateProductDto;
            };
            res: {
                /**
                 * Get create one base response
                 */
                201: SerializedProductDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/products/bulk': {
        post: {
            req: {
                requestBody: CreateManyProductEntityDto;
            };
            res: {
                /**
                 * Get create many base response
                 */
                201: Array<SerializedProductDto>;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/products/{id}/recover': {
        patch: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Recover one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/categories/{id}': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                id: string;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
            };
            res: {
                /**
                 * Get one base response
                 */
                200: SerializedCategoryDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        patch: {
            req: {
                id: string;
                requestBody: CategoryEntity;
            };
            res: {
                /**
                 * Response
                 */
                200: SerializedCategoryDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        delete: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Delete one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/categories': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                /**
                 * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
                 */
                filter?: Array<(string)>;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
                /**
                 * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
                 */
                limit?: number;
                /**
                 * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
                 */
                offset?: number;
                /**
                 * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
                 */
                or?: Array<(string)>;
                /**
                 * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
                 */
                page?: number;
                /**
                 * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
                 */
                s?: string;
                /**
                 * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
                 */
                sort?: Array<(string)>;
            };
            res: {
                /**
                 * Get paginated response
                 */
                200: GetManyCategoryEntityResponseDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        post: {
            req: {
                requestBody: CreateCategoryDto;
            };
            res: {
                /**
                 * Get create one base response
                 */
                201: SerializedCategoryDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/categories/bulk': {
        post: {
            req: {
                requestBody: CreateManyCategoryEntityDto;
            };
            res: {
                /**
                 * Get create many base response
                 */
                201: Array<SerializedCategoryDto>;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/categories/{id}/recover': {
        patch: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Recover one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/brands/{id}': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                id: string;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
            };
            res: {
                /**
                 * Get one base response
                 */
                200: SerializedBrandDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        patch: {
            req: {
                id: string;
                requestBody: BrandEntity;
            };
            res: {
                /**
                 * Response
                 */
                200: SerializedBrandDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        delete: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Delete one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/brands': {
        get: {
            req: {
                /**
                 * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
                 */
                cache?: number;
                /**
                 * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
                 */
                fields?: Array<(string)>;
                /**
                 * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
                 */
                filter?: Array<(string)>;
                /**
                 * Include deleted. <a href="https://github.com/nestjsx/crud/wiki/Requests#includeDeleted" target="_blank">Docs</a>
                 */
                includeDeleted?: number;
                /**
                 * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
                 */
                join?: Array<(string)>;
                /**
                 * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
                 */
                limit?: number;
                /**
                 * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
                 */
                offset?: number;
                /**
                 * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
                 */
                or?: Array<(string)>;
                /**
                 * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
                 */
                page?: number;
                /**
                 * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
                 */
                s?: string;
                /**
                 * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
                 */
                sort?: Array<(string)>;
            };
            res: {
                /**
                 * Get paginated response
                 */
                200: GetManyBrandEntityResponseDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
        post: {
            req: {
                requestBody: CreateBrandDto;
            };
            res: {
                /**
                 * Get create one base response
                 */
                201: SerializedBrandDto;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/brands/bulk': {
        post: {
            req: {
                requestBody: CreateManyBrandEntityDto;
            };
            res: {
                /**
                 * Get create many base response
                 */
                201: Array<SerializedBrandDto>;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
    '/brands/{id}/recover': {
        patch: {
            req: {
                id: string;
            };
            res: {
                /**
                 * Recover one base response
                 */
                200: unknown;
                /**
                 * Forbidden.
                 */
                403: unknown;
            };
        };
    };
};